{"repository_name":"pdf","body":"# pdf.cr \r\n> PDF for Crystal\r\nforked from [marceloboeira's repository](https://github.com/marceloboeira/pdf.cr)\r\n\r\nthis lib provides generation and (todo) analysis of pdf documents\r\n\r\nSome of the document is written in Chinese, and they will later be replaced with texts from the standard\r\n\r\nWe'll first support PDF-1.3, which can be seen in the `references` directory\r\n## Installation\r\n\r\nAdd this to your application's `shard.yml`:\r\n\r\n```yaml\r\ndependencies:\r\n  pdf:\r\n    github: homodeluna/pdf.cr\r\n```\r\n\r\n## Contributing\r\n\r\nWe're now mapping types definition from scecification to crystal, part of our result can be seen in the `/src/document` directory.\r\nIf you want to contribute, please help us to map all the types needed to crystal, adding comments from the reference is also welcomed.\r\n\r\n1. Fork it (https://github.com/homodeluna/pdf.cr/fork)\r\n2. Create your feature branch (git checkout -b my-new-feature)\r\n3. Commit your changes (git commit -am 'Add some feature')\r\n4. Push to the branch (git push origin my-new-feature)\r\n5. Create a new Pull Request\r\n","program":{"html_id":"pdf/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"pdf","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"pdf/PDF","path":"PDF.html","kind":"module","full_name":"PDF","name":"PDF","abstract":false,"locations":[{"filename":"src\\pdf.cr","line_number":4,"url":null},{"filename":"src\\pdf\\document\\crossref.cr","line_number":1,"url":null},{"filename":"src\\pdf\\document\\document.cr","line_number":2,"url":null},{"filename":"src\\pdf\\document\\encrypt.cr","line_number":2,"url":null},{"filename":"src\\pdf\\document\\header.cr","line_number":1,"url":null},{"filename":"src\\pdf\\document\\pagetree\\abstract_pagetree.cr","line_number":1,"url":null},{"filename":"src\\pdf\\document\\pagetree\\catalog.cr","line_number":3,"url":null},{"filename":"src\\pdf\\document\\pagetree\\number_tree.cr","line_number":1,"url":null},{"filename":"src\\pdf\\document\\pagetree\\pagetree.cr","line_number":2,"url":null},{"filename":"src\\pdf\\document\\trailer.cr","line_number":1,"url":null},{"filename":"src\\pdf\\obj\\name.cr","line_number":1,"url":null},{"filename":"src\\pdf\\obj\\obj.cr","line_number":3,"url":null},{"filename":"src\\pdf\\obj\\ref.cr","line_number":1,"url":null},{"filename":"src\\pdf\\obj\\stream.cr","line_number":2,"url":null},{"filename":"src\\pdf\\version.cr","line_number":1,"url":null}],"repository_name":"pdf","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.0.0\""}],"doc":"In the whole module, we prefer simplicity than performance\r","summary":"<p>In the whole module, we prefer simplicity than performance</p>","types":[{"html_id":"pdf/PDF/Catalog","path":"PDF/Catalog.html","kind":"class","full_name":"PDF::Catalog","name":"Catalog","abstract":false,"superclass":{"html_id":"pdf/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"pdf/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"pdf/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src\\pdf\\document\\pagetree\\catalog.cr","line_number":14,"url":null}],"repository_name":"pdf","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"TYPE","name":"TYPE","value":"Name.new(\"Catalog\")","doc":"The type of PDF object that this dictionary describes; \r\nmust be Catalog for the catalog dictionary. \r","summary":"<p>The type of PDF object that this dictionary describes; \r must be Catalog for the catalog dictionary.</p>"}],"namespace":{"html_id":"pdf/PDF","kind":"module","full_name":"PDF","name":"PDF"},"doc":"The root of a document’s object hierarchy is the catalog dictionary, located via the\r\n**Root** entry in the trailer of the PDF file (see Section 3.4.4, “File Trailer”). \r\nThe catalog contains references to other objects defining the document’s contents, outline, \r\narticle threads (PDF 1.1), named destinations, and other attributes. \r\n\r\nIn addition, it contains information about how the document should be displayed\r\non the screen, such as whether its outline and thumbnail page images should be\r\ndisplayed automatically and whether some location other than the first page\r\nshould be shown when the document is opened.\r","summary":"<p>The root of a document’s object hierarchy is the catalog dictionary, located via the\r <strong>Root</strong> entry in the trailer of the PDF file (see Section 3.4.4, “File Trailer”).</p>","constructors":[{"html_id":"new(pages:Hash(PDF::Name,PDF::PageTreeNode))-class-method","name":"new","abstract":false,"args":[{"name":"pages","external_name":"pages","restriction":"::Hash(::PDF::Name, ::PDF::PageTreeNode)"}],"args_string":"(pages : Hash(PDF::Name, PDF::PageTreeNode))","args_html":"(pages : Hash(<a href=\"../PDF/Name.html\">PDF::Name</a>, <a href=\"../PDF/PageTreeNode.html\">PDF::PageTreeNode</a>))","location":{"filename":"src\\pdf\\document\\pagetree\\catalog.cr","line_number":106,"url":null},"def":{"name":"new","args":[{"name":"pages","external_name":"pages","restriction":"::Hash(::PDF::Name, ::PDF::PageTreeNode)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(pages)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"type-instance-method","name":"type","abstract":false,"location":{"filename":"src\\pdf\\document\\pagetree\\catalog.cr","line_number":19,"url":null},"def":{"name":"type","visibility":"Public","body":"TYPE"}}],"types":[{"html_id":"pdf/PDF/Catalog/PageLayout","path":"PDF/Catalog/PageLayout.html","kind":"enum","full_name":"PDF::Catalog::PageLayout","name":"PageLayout","abstract":false,"ancestors":[{"html_id":"pdf/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"pdf/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"pdf/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"pdf/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src\\pdf\\document\\pagetree\\catalog.cr","line_number":42,"url":null}],"repository_name":"pdf","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"SinglePage","name":"SinglePage","value":"0","doc":"Display one page at a time. \r","summary":"<p>Display one page at a time.</p>"},{"id":"OneColumn","name":"OneColumn","value":"1","doc":"Display the pages in one column. \r","summary":"<p>Display the pages in one column.</p>"},{"id":"TwoColumnLeft","name":"TwoColumnLeft","value":"2","doc":"Display the pages in two columns, with oddnumbered pages on the left. \r","summary":"<p>Display the pages in two columns, with oddnumbered pages on the left.</p>"},{"id":"TwoColumnRight","name":"TwoColumnRight","value":"3","doc":"Display the pages in two columns, with oddnumbered pages on the right. \r","summary":"<p>Display the pages in two columns, with oddnumbered pages on the right.</p>"}],"namespace":{"html_id":"pdf/PDF/Catalog","kind":"class","full_name":"PDF::Catalog","name":"Catalog"},"doc":"A name object specifying the page layout to be used when the document is opened: \r","summary":"<p>A name object specifying the page layout to be used when the document is opened:</p>","class_methods":[{"html_id":"default-class-method","name":"default","doc":"Default value: SinglePage.     \r","summary":"<p>Default value: SinglePage.</p>","abstract":false,"location":{"filename":"src\\pdf\\document\\pagetree\\catalog.cr","line_number":52,"url":null},"def":{"name":"default","visibility":"Public","body":"SinglePage"}}],"instance_methods":[{"html_id":"one_column?-instance-method","name":"one_column?","abstract":false,"location":{"filename":"src\\pdf\\document\\pagetree\\catalog.cr","line_number":46,"url":null},"def":{"name":"one_column?","visibility":"Public","body":"self == OneColumn"}},{"html_id":"single_page?-instance-method","name":"single_page?","abstract":false,"location":{"filename":"src\\pdf\\document\\pagetree\\catalog.cr","line_number":44,"url":null},"def":{"name":"single_page?","visibility":"Public","body":"self == SinglePage"}},{"html_id":"to_name:Name-instance-method","name":"to_name","abstract":false,"location":{"filename":"src\\pdf\\document\\pagetree\\catalog.cr","line_number":55,"url":null},"def":{"name":"to_name","return_type":"Name","visibility":"Public","body":"Name.sym_cases(self, SinglePage, OneColumn, TwoColumnLeft, TwoColumnRight)"}},{"html_id":"two_column_left?-instance-method","name":"two_column_left?","abstract":false,"location":{"filename":"src\\pdf\\document\\pagetree\\catalog.cr","line_number":48,"url":null},"def":{"name":"two_column_left?","visibility":"Public","body":"self == TwoColumnLeft"}},{"html_id":"two_column_right?-instance-method","name":"two_column_right?","abstract":false,"location":{"filename":"src\\pdf\\document\\pagetree\\catalog.cr","line_number":50,"url":null},"def":{"name":"two_column_right?","visibility":"Public","body":"self == TwoColumnRight"}}]},{"html_id":"pdf/PDF/Catalog/PageMode","path":"PDF/Catalog/PageMode.html","kind":"enum","full_name":"PDF::Catalog::PageMode","name":"PageMode","abstract":false,"ancestors":[{"html_id":"pdf/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"pdf/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"pdf/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"pdf/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src\\pdf\\document\\pagetree\\catalog.cr","line_number":65,"url":null}],"repository_name":"pdf","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"UseNone","name":"UseNone","value":"0","doc":"Neither document outline nor thumbnail images visible \r","summary":"<p>Neither document outline nor thumbnail images visible</p>"},{"id":"UseOutLines","name":"UseOutLines","value":"1","doc":"Document outline visible \r","summary":"<p>Document outline visible</p>"},{"id":"UseThumbs","name":"UseThumbs","value":"2","doc":"Thumbnail images visible \r","summary":"<p>Thumbnail images visible</p>"},{"id":"FullScreen","name":"FullScreen","value":"3","doc":"Full-screen mode, with no menu bar, window controls, or any other window visible \r","summary":"<p>Full-screen mode, with no menu bar, window controls, or any other window visible</p>"}],"namespace":{"html_id":"pdf/PDF/Catalog","kind":"class","full_name":"PDF::Catalog","name":"Catalog"},"doc":"Outlines dictionary (Optional; must be an indirect reference) The outline dictionary that is\r\nthe root of the document’s outline hierarchy (see Section 7.2.2, “Document Outline”). \r\nThreads array (Optional; PDF 1.1; must be an indirect reference) \r\nAn array of thread dictionaries representing the document’s article threads (see Section 7.3.2,“Articles”). \r","summary":"<p>Outlines dictionary (Optional; must be an indirect reference) The outline dictionary that is\r the root of the document’s outline hierarchy (see Section 7.2.2, “Document Outline”).</p>","class_methods":[{"html_id":"default-class-method","name":"default","doc":"Default value: UseNone.     \r","summary":"<p>Default value: UseNone.</p>","abstract":false,"location":{"filename":"src\\pdf\\document\\pagetree\\catalog.cr","line_number":75,"url":null},"def":{"name":"default","visibility":"Public","body":"UseNone"}}],"instance_methods":[{"html_id":"full_screen?-instance-method","name":"full_screen?","abstract":false,"location":{"filename":"src\\pdf\\document\\pagetree\\catalog.cr","line_number":73,"url":null},"def":{"name":"full_screen?","visibility":"Public","body":"self == FullScreen"}},{"html_id":"to_name:Name-instance-method","name":"to_name","abstract":false,"location":{"filename":"src\\pdf\\document\\pagetree\\catalog.cr","line_number":78,"url":null},"def":{"name":"to_name","return_type":"Name","visibility":"Public","body":"case self\nin UseNone\n  Names.new(\"UseNone\")\nin UseOutLines\n  Names.new(\"UseOutLines\")\nin UseThumbs\n  Names.new(\"UseThumbs\")\nin FullScreen\n  Names.new(\"FullScreen\")\nend"}},{"html_id":"use_none?-instance-method","name":"use_none?","abstract":false,"location":{"filename":"src\\pdf\\document\\pagetree\\catalog.cr","line_number":67,"url":null},"def":{"name":"use_none?","visibility":"Public","body":"self == UseNone"}},{"html_id":"use_out_lines?-instance-method","name":"use_out_lines?","abstract":false,"location":{"filename":"src\\pdf\\document\\pagetree\\catalog.cr","line_number":69,"url":null},"def":{"name":"use_out_lines?","visibility":"Public","body":"self == UseOutLines"}},{"html_id":"use_thumbs?-instance-method","name":"use_thumbs?","abstract":false,"location":{"filename":"src\\pdf\\document\\pagetree\\catalog.cr","line_number":71,"url":null},"def":{"name":"use_thumbs?","visibility":"Public","body":"self == UseThumbs"}}]}]},{"html_id":"pdf/PDF/Document","path":"PDF/Document.html","kind":"class","full_name":"PDF::Document","name":"Document","abstract":false,"superclass":{"html_id":"pdf/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"pdf/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"pdf/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src\\pdf\\document\\crossref.cr","line_number":2,"url":null},{"filename":"src\\pdf\\document\\document.cr","line_number":13,"url":null},{"filename":"src\\pdf\\document\\encrypt.cr","line_number":3,"url":null},{"filename":"src\\pdf\\document\\header.cr","line_number":2,"url":null},{"filename":"src\\pdf\\document\\trailer.cr","line_number":2,"url":null}],"repository_name":"pdf","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"pdf/PDF","kind":"module","full_name":"PDF","name":"PDF"},"doc":"A canonical PDF file initially consists of four elements : \r\n- A one-line header identifying the version number of the PDF specification to which the file conforms \r\n- A body containing the objects that make up the document contained in the file \r\n- A cross-reference table containing information about the indirect objects in the file \r\n- A trailer giving the location of the cross-reference table and of certain special objects within the body of the file\r\n\r\nThe body of a PDF file consists of a sequence of indirect objects representing the\r\ncontents of a document. The objects, which are of the basic types described in\r\nSection 3.2, “Objects,” represent components of the document such as fonts,\r\npages, and sampled images.\r","summary":"<p>A canonical PDF file initially consists of four elements : \r - A one-line header identifying the version number of the PDF specification to which the file conforms \r - A body containing the objects that make up the document contained in the file \r - A cross-reference table containing information about the indirect objects in the file \r - A trailer giving the location of the cross-reference table and of certain special objects within the body of the file\r \r The body of a PDF file consists of a sequence of indirect objects representing the\r contents of a document.</p>","constructors":[{"html_id":"new(header:PDF::Document::Header,boty,crossrefs:Int32,trailers:Int32)-class-method","name":"new","abstract":false,"args":[{"name":"header","external_name":"header","restriction":"::PDF::Document::Header"},{"name":"boty","external_name":"boty","restriction":""},{"name":"crossrefs","external_name":"crossrefs","restriction":"::Int32"},{"name":"trailers","external_name":"trailers","restriction":"::Int32"}],"args_string":"(header : PDF::Document::Header, boty, crossrefs : Int32, trailers : Int32)","args_html":"(header : <a href=\"../PDF/Document/Header.html\">PDF::Document::Header</a>, boty, crossrefs : Int32, trailers : Int32)","location":{"filename":"src\\pdf\\document\\document.cr","line_number":22,"url":null},"def":{"name":"new","args":[{"name":"header","external_name":"header","restriction":"::PDF::Document::Header"},{"name":"boty","external_name":"boty","restriction":""},{"name":"crossrefs","external_name":"crossrefs","restriction":"::Int32"},{"name":"trailers","external_name":"trailers","restriction":"::Int32"}],"visibility":"Public","body":"_ = allocate\n_.initialize(header, boty, crossrefs, trailers)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"render(io:IO)-instance-method","name":"render","doc":"将PDF文档写入文件中的一系列字节要比阅读它简单得多， 我们不需要支持所有PDF格式，只需要支持我们打算使用的子集。写作 PDF文件非常快，因为它只是将对象图展平为一系列字节。\r\n\r\n- 输出header。\r\n- 删除PDF中任何其他对象未引用的任何对象。这个避免编写不再需要的对象。\r\n- 重新编号对象，使它们从1到n运行，其中n是对象的数量文件。\r\n- 逐个输出对象，从对象编号1开始，记录字节交叉引用表的每个偏移量。\r\n- 编写交叉引用表。\r\n- 编写trailer，trailer字典和文件结束标记\r","summary":"<p>将PDF文档写入文件中的一系列字节要比阅读它简单得多， 我们不需要支持所有PDF格式，只需要支持我们打算使用的子集。写作 PDF文件非常快，因为它只是将对象图展平为一系列字节。\r \r - 输出header。\r - 删除PDF中任何其他对象未引用的任何对象。这个避免编写不再需要的对象。\r - 重新编号对象，使它们从1到n运行，其中n是对象的数量文件。\r - 逐个输出对象，从对象编号1开始，记录字节交叉引用表的每个偏移量。\r - 编写交叉引用表。\r - 编写trailer，trailer字典和文件结束标记</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src\\pdf\\document\\document.cr","line_number":33,"url":null},"def":{"name":"render","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"@header.render(io)\nio << \"%%EOF\"\n"}}],"types":[{"html_id":"pdf/PDF/Document/CrossRef","path":"PDF/Document/CrossRef.html","kind":"class","full_name":"PDF::Document::CrossRef","name":"CrossRef","abstract":false,"superclass":{"html_id":"pdf/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"pdf/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"pdf/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src\\pdf\\document\\crossref.cr","line_number":41,"url":null}],"repository_name":"pdf","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"pdf/PDF/Document","kind":"class","full_name":"PDF::Document","name":"Document"},"doc":"The cross-reference table contains information that permits random access to indirect objects within the file, \r\nso that the entire file need not be read to locate any particular object. \r\nThe table contains a one-line entry for each indirect object,\r\nspecifying the location of that object within the body of the file. \r\n\r\nThe cross-reference table is the only part of a PDF file with a fixed format; \r\nthispermits entries in the table to be accessed randomly. \r\nThe table comprises one ormore cross-reference sections. \r\nInitially, the entire table consists of a single section;\r\none additional section is added each time the file is updated (see Section 3.4.5,“Incremental Updates”). \r\n\r\nEach cross-reference section begins with a line containing the keyword xref. \r\nFollowing this line are one or more cross-reference subsections, which may appear in any order. \r\nThe subsection structure is useful for incremental updates, \r\nsince it allows a new cross-reference section to be added to the PDF file, \r\ncontaining entries only for objects that have been added or deleted. \r\nFor a file that has never been updated, the cross-reference section contains only one subsection, \r\nwhose object numbering begins at 0.\r\n\r\nEach cross-reference subsection contains entries for a contiguous range of object numbers. \r\nThe subsection begins with a line containing two numbers, separated by a space: \r\nthe object number of the first object in this subsection and the number of entries in the subsection. \r\nFor example, the line `28 5`\r\nintroduces a subsection containing five objects, numbered consecutively from 28 to 32.\r\n\r\nAn overall example seems like:\r\n```plaintext\r\n   xref\r\n0 1\r\n0000000000 65535 f\r\n3 1\r\n0000025325 00000 n\r\n23 2\r\n0000025518 00002 n\r\n0000025635 00000 n\r\n30 1\r\n0000025777 00000 n\r\n```\r","summary":"<p>The cross-reference table contains information that permits random access to indirect objects within the file, \r so that the entire file need not be read to locate any particular object.</p>","constructors":[{"html_id":"new(start:Int32,entries:Array(PDF::Document::CrossRef::Entry))-class-method","name":"new","abstract":false,"args":[{"name":"start","external_name":"start","restriction":"::Int32"},{"name":"entries","external_name":"entries","restriction":"::Array(::PDF::Document::CrossRef::Entry)"}],"args_string":"(start : Int32, entries : Array(PDF::Document::CrossRef::Entry))","args_html":"(start : Int32, entries : Array(<a href=\"../../PDF/Document/CrossRef/Entry.html\">PDF::Document::CrossRef::Entry</a>))","location":{"filename":"src\\pdf\\document\\crossref.cr","line_number":71,"url":null},"def":{"name":"new","args":[{"name":"start","external_name":"start","restriction":"::Int32"},{"name":"entries","external_name":"entries","restriction":"::Array(::PDF::Document::CrossRef::Entry)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(start, entries)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"size-instance-method","name":"size","abstract":false,"location":{"filename":"src\\pdf\\document\\crossref.cr","line_number":75,"url":null},"def":{"name":"size","visibility":"Public","body":"@entries.size"}}],"types":[{"html_id":"pdf/PDF/Document/CrossRef/Entry","path":"PDF/Document/CrossRef/Entry.html","kind":"struct","full_name":"PDF::Document::CrossRef::Entry","name":"Entry","abstract":false,"superclass":{"html_id":"pdf/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"pdf/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"pdf/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"pdf/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src\\pdf\\document\\crossref.cr","line_number":42,"url":null}],"repository_name":"pdf","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"pdf/PDF/Document/CrossRef","kind":"class","full_name":"PDF::Document::CrossRef","name":"CrossRef"},"constructors":[{"html_id":"new(target:Int32,generation:Int32=0,using:Bool=true)-class-method","name":"new","abstract":false,"args":[{"name":"target","external_name":"target","restriction":"::Int32"},{"name":"generation","default_value":"0","external_name":"generation","restriction":"::Int32"},{"name":"using","default_value":"true","external_name":"using","restriction":"::Bool"}],"args_string":"(target : Int32, generation : Int32 = 0, using : Bool = true)","args_html":"(target : Int32, generation : Int32 = <span class=\"n\">0</span>, using : Bool = <span class=\"n\">true</span>)","location":{"filename":"src\\pdf\\document\\crossref.cr","line_number":47,"url":null},"def":{"name":"new","args":[{"name":"target","external_name":"target","restriction":"::Int32"},{"name":"generation","default_value":"0","external_name":"generation","restriction":"::Int32"},{"name":"using","default_value":"true","external_name":"using","restriction":"::Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(target, generation, using)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"entry-instance-method","name":"entry","abstract":false,"location":{"filename":"src\\pdf\\document\\crossref.cr","line_number":46,"url":null},"def":{"name":"entry","visibility":"Public","body":"@entry"}},{"html_id":"format:String-instance-method","name":"format","doc":"The format of an in-use entry is as follows: \r\n\r\n`nnnnnnnnnn ggggg n eol`\r\n\r\nwhere \r\n- `nnnnnnnnnn` is a 10-digit byte offset \r\n- `ggggg` is a 5-digit generation number \r\n- `n` is a literal keyword identifying this as an in-use entry ,for a free entry use `f`\r\n- `eol` is a 2-character end-of-line sequence\r","summary":"<p>The format of an in-use entry is as follows: \r \r <code>nnnnnnnnnn ggggg n eol</code>\r \r where \r - <code>nnnnnnnnnn</code> is a 10-digit byte offset \r - <code>ggggg</code> is a 5-digit generation number \r - <code>n</code> is a literal keyword identifying this as an in-use entry ,for a free entry use <code>f</code>\r - <code>eol</code> is a 2-character end-of-line sequence</p>","abstract":false,"location":{"filename":"src\\pdf\\document\\crossref.cr","line_number":63,"url":null},"def":{"name":"format","return_type":"String","visibility":"Public","body":"\"#{@target.to_s(precision = 10)} #{@generation.to_s(precision = 5)} #{@using ? 'n' : 'f'}\\r\\n\""}},{"html_id":"generation:Int32-instance-method","name":"generation","abstract":false,"location":{"filename":"src\\pdf\\document\\crossref.cr","line_number":46,"url":null},"def":{"name":"generation","visibility":"Public","body":"@generation"}},{"html_id":"using:Bool-instance-method","name":"using","abstract":false,"location":{"filename":"src\\pdf\\document\\crossref.cr","line_number":46,"url":null},"def":{"name":"using","visibility":"Public","body":"@using"}}]}]},{"html_id":"pdf/PDF/Document/Encrypt","path":"PDF/Document/Encrypt.html","kind":"class","full_name":"PDF::Document::Encrypt","name":"Encrypt","abstract":false,"superclass":{"html_id":"pdf/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"pdf/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"pdf/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src\\pdf\\document\\encrypt.cr","line_number":23,"url":null}],"repository_name":"pdf","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"DEFAULT","name":"DEFAULT","value":"0"}],"namespace":{"html_id":"pdf/PDF/Document","kind":"class","full_name":"PDF::Document","name":"Document"},"doc":"A PDF document can be encrypted (PDF 1.1) to protect its contents from unauthorized access. \r\n\r\nEncryption applies to all strings and streams in the document’s\r\nPDF file, but not to other object types such as integers and boolean values, which\r\nare used primarily to convey information about the document’s structure rather\r\nthan its content. Leaving these values unencrypted allows random access to the\r\nobjects within a document, while encrypting the strings and streams protects the\r\ndocument’s substantive contents. \r\n\r\nNote: When a PDF stream object (see Section 3.2.7, “Stream Objects”) refers to an\r\nexternal file, the stream’s contents are not encrypted, since they are not part of the\r\nPDF file itself. However, if the contents of the stream are embedded within the PDF\r\nfile (see Section 3.10.3, “Embedded File Streams”), they are encrypted like any other\r\nstream in the file. \r\n\r\nEncryption is controlled by an encryption dictionary, which is the value of the\r\nEncrypt entry in the document’s trailer dictionary (see Table 3.11 on page 61). If\r\nthis entry is absent from the trailer dictionary, the document is not encrypted.\r\nThe entries shown in Table 3.12 are common to all encryption dictionaries.\r","summary":"<p>A PDF document can be encrypted (PDF 1.1) to protect its contents from unauthorized access.</p>","constructors":[{"html_id":"new(filter:PDF::Name,v:Int32?=nil)-class-method","name":"new","abstract":false,"args":[{"name":"filter","external_name":"filter","restriction":"::PDF::Name"},{"name":"v","default_value":"nil","external_name":"v","restriction":"::Int32 | ::Nil"}],"args_string":"(filter : PDF::Name, v : Int32? = nil)","args_html":"(filter : <a href=\"../../PDF/Name.html\">PDF::Name</a>, v : Int32? = <span class=\"n\">nil</span>)","location":{"filename":"src\\pdf\\document\\encrypt.cr","line_number":39,"url":null},"def":{"name":"new","args":[{"name":"filter","external_name":"filter","restriction":"::PDF::Name"},{"name":"v","default_value":"nil","external_name":"v","restriction":"::Int32 | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(filter, v)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"to_h:Hash(String,Name)-instance-method","name":"to_h","abstract":false,"location":{"filename":"src\\pdf\\document\\encrypt.cr","line_number":42,"url":null},"def":{"name":"to_h","return_type":"Hash(String, Name)","visibility":"Public","body":""}}]},{"html_id":"pdf/PDF/Document/Header","path":"PDF/Document/Header.html","kind":"class","full_name":"PDF::Document::Header","name":"Header","abstract":false,"superclass":{"html_id":"pdf/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"pdf/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"pdf/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src\\pdf\\document\\header.cr","line_number":18,"url":null}],"repository_name":"pdf","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MAGIC","name":"MAGIC","value":"\"%âãÏÓ\"","doc":"把一些不可打印的字符添加到PDF标题中 - 这可确保文件被识别为二进制 （而不是文本），例如，通过FTP等文件传输程序。\r","summary":"<p>把一些不可打印的字符添加到PDF标题中 - 这可确保文件被识别为二进制 （而不是文本），例如，通过FTP等文件传输程序。</p>"}],"namespace":{"html_id":"pdf/PDF/Document","kind":"class","full_name":"PDF::Document","name":"Document"},"doc":"PDF文件的第一行给出文档的版本号。在我们的示例中，是：\r\n```plaintext\r\n%PDF-1.0\r\n```\r\n这将文件定义为PDF版本1.0。PDF是向后兼容的，因此PDF 1.3文档 应该由知道例如PDF 1.5的程序读取。它在很大程度上也是向前兼容的， 因此大多数PDF程序都会尝试读取任何文件，无论假设的版本号是什么。\r\n\r\n由于PDF文件几乎总是包含二进制数据，因此如果更改行结尾 （例如，如果文件通过FTP以文本模式传输），它们可能会损坏。 为了允许传统文件传输程序确定文件是二进制文件， 通常在标头中包含一些字符代码高于127的字节。例如：\r\n```plaintext\r\n%âãÏÓ\r\n```\r\n百分号表示另一个标题行，其他几个字节是超过127的任意字符代码。 因此，我们示例中的整个header是：\r\n```plaintext\r\n%PDF-1.0\r\n%âãÏÓ\r\n```\r","summary":"<p>PDF文件的第一行给出文档的版本号。在我们的示例中，是：\r <code>plaintext %<a href=\"../../PDF.html\">PDF</a>-1.0</code>\r 这将文件定义为PDF版本1.0。PDF是向后兼容的，因此PDF 1.3文档 应该由知道例如PDF 1.5的程序读取。它在很大程度上也是向前兼容的， 因此大多数PDF程序都会尝试读取任何文件，无论假设的版本号是什么。\r \r 由于PDF文件几乎总是包含二进制数据，因此如果更改行结尾 （例如，如果文件通过FTP以文本模式传输），它们可能会损坏。 为了允许传统文件传输程序确定文件是二进制文件， 通常在标头中包含一些字符代码高于127的字节。例如：\r <code>plaintext %âãÏÓ</code>\r 百分号表示另一个标题行，其他几个字节是超过127的任意字符代码。 因此，我们示例中的整个header是：\r <code>plaintext %<a href=\"../../PDF.html\">PDF</a>-1.0 %âãÏÓ</code></p>","instance_methods":[{"html_id":"render(io:IO)-instance-method","name":"render","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src\\pdf\\document\\header.cr","line_number":23,"url":null},"def":{"name":"render","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"((io << \"%PDF-\") << @version) << \"\\n%âãÏÓ\\n\""}}]},{"html_id":"pdf/PDF/Document/Trailer","path":"PDF/Document/Trailer.html","kind":"class","full_name":"PDF::Document::Trailer","name":"Trailer","abstract":false,"superclass":{"html_id":"pdf/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"pdf/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"pdf/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src\\pdf\\document\\trailer.cr","line_number":36,"url":null}],"repository_name":"pdf","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"pdf/PDF/Document","kind":"class","full_name":"PDF::Document","name":"Document"},"doc":"The trailer of a PDF file enables an application reading the file to quickly find the\r\ncross-reference table and certain special objects. Applications should read a PDF\r\nfile from its end. The last line of the file contains only the end-of-file marker,\r\n%%EOF. (See implementation note 15 in Appendix H.) The two preceding lines\r\ncontain the keyword **startxref** and the byte offset from the beginning of the file to\r\nthe beginning of the xref keyword in the last cross-reference section. \r\nThe **startxref** line is preceded by the trailer dictionary, \r\nconsisting of the keyword trailer followed by a series of key-value pairs enclosed in double angle brackets. \r\nThus the trailer has the following overall structure:\r\n```plaintext\r\ntrailer\r\n << key1 value1\r\n    key2 value2 …\r\n    keyn valuen\r\n >>\r\nstartxref\r\nByte_offset_of_last_cross-reference_section\r\n%%EOF\r\n```\r\nHere is a factual trailer:\r\n```\r\ntrailer\r\n<< /Size 22\r\n /Root 2 0 R\r\n /Info 1 0 R\r\n /ID [ <81b14aafa313db63dbd6f981e49f94f4>\r\n<81b14aafa313db63dbd6f981e49f94f4>\r\n]\r\n>>\r\nstartxref\r\n18799\r\n%%EOF\r\n```\r","summary":"<p>The trailer of a PDF file enables an application reading the file to quickly find the\r cross-reference table and certain special objects.</p>","instance_methods":[{"html_id":"size-instance-method","name":"size","doc":"The total number of entries in the file’s cross-reference table, as defined\r\nby the combination of the original section and all update sections. Equivalently, this\r\nvalue is 1 greater than the highest object number used in the file. \r","summary":"<p>The total number of entries in the file’s cross-reference table, as defined\r by the combination of the original section and all update sections.</p>","abstract":false,"location":{"filename":"src\\pdf\\document\\trailer.cr","line_number":40,"url":null},"def":{"name":"size","visibility":"Public","body":""}}]}]},{"html_id":"pdf/PDF/Name","path":"PDF/Name.html","kind":"class","full_name":"PDF::Name","name":"Name","abstract":false,"superclass":{"html_id":"pdf/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"pdf/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"pdf/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src\\pdf\\obj\\name.cr","line_number":3,"url":null},{"filename":"src\\pdf\\obj\\obj.cr","line_number":5,"url":null}],"repository_name":"pdf","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"pdf/PDF","kind":"module","full_name":"PDF","name":"PDF"},"class_methods":[{"html_id":"format(str:String):String-class-method","name":"format","doc":"This syntax is required in order to represent any of the delimiter or white-space characters or the number sign character itself; \r\nit is recommended but not required for\r\ncharacters whose codes are outside the range 33 (!) to 126 (~)\r","summary":"<p>This syntax is required in order to represent any of the delimiter or white-space characters or the number sign character itself; \r it is recommended but not required for\r characters whose codes are outside the range 33 (!) to 126 (~)</p>","abstract":false,"args":[{"name":"str","external_name":"str","restriction":"String"}],"args_string":"(str : String) : String","args_html":"(str : String) : String","location":{"filename":"src\\pdf\\obj\\name.cr","line_number":11,"url":null},"def":{"name":"format","args":[{"name":"str","external_name":"str","restriction":"String"}],"return_type":"String","visibility":"Public","body":"String.build do |builder|\n  str.each_char do |c|\n    case c.ord\n    when 35\n      (builder << '#') << (c.ord.to_s(16))\n    when [33..126]\n      builder << c\n    when [256..-1]\n      raise(\"non ascii char #{c} in #{str.inspect}are not premitted in names\")\n    else\n      (builder << '#') << (c.ord.to_s(16))\n    end\n  end\nend"}}],"constructors":[{"html_id":"new(value:String)-class-method","name":"new","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"::String"}],"args_string":"(value : String)","args_html":"(value : String)","location":{"filename":"src\\pdf\\obj\\obj.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"value","external_name":"value","restriction":"::String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"inner:String-instance-method","name":"inner","abstract":false,"location":{"filename":"src\\pdf\\obj\\name.cr","line_number":5,"url":null},"def":{"name":"inner","visibility":"Public","body":"@inner"}},{"html_id":"inner=(inner:String)-instance-method","name":"inner=","abstract":false,"args":[{"name":"inner","external_name":"inner","restriction":"::String"}],"args_string":"(inner : String)","args_html":"(inner : String)","location":{"filename":"src\\pdf\\obj\\name.cr","line_number":5,"url":null},"def":{"name":"inner=","args":[{"name":"inner","external_name":"inner","restriction":"::String"}],"visibility":"Public","body":"@inner = inner"}},{"html_id":"to_s-instance-method","name":"to_s","doc":"This syntax is required in order to represent any of the delimiter or white-space characters or the number sign character itself; \r\nit is recommended but not required for\r\ncharacters whose codes are outside the range 33 (!) to 126 (~)\r","summary":"<p>This syntax is required in order to represent any of the delimiter or white-space characters or the number sign character itself; \r it is recommended but not required for\r characters whose codes are outside the range 33 (!) to 126 (~)</p>","abstract":false,"location":{"filename":"src\\pdf\\obj\\name.cr","line_number":28,"url":null},"def":{"name":"to_s","visibility":"Public","body":"Name.format(str)"}}],"macros":[{"html_id":"sym_cases(source,*namesyms)-macro","name":"sym_cases","doc":"It's helpful in binding enums with `Names` from its symbol. \r\nAn example from this can be seen from `PDF::Catalog::PageLayout#to_name`:\r\n```\r\nName.symcases( self,SinglePage,OneColumn,TwoColumnLeft, TwoColumnRight)\r\n#expand to \r\ncase self\r\nwhen SinglePage then Name.new(\"SinglePage\")\r\nwhen OneColumn then Name.new(\"OneColumn\")\r\nwhen TwoColumnLeft then Name.new(\"TwoColumnLeft\")\r\nwhen TwoColumnRight then Name.new(\"TwoColumnRight\")\r\nend\r","summary":"<p>It's helpful in binding enums with <code>Names</code> from its symbol.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":""},{"name":"namesyms","external_name":"namesyms","restriction":""}],"args_string":"(source, *namesyms)","args_html":"(source, *namesyms)","location":{"filename":"src\\pdf\\obj\\name.cr","line_number":42,"url":null},"def":{"name":"sym_cases","args":[{"name":"source","external_name":"source","restriction":""},{"name":"namesyms","external_name":"namesyms","restriction":""}],"splat_index":1,"visibility":"Public","body":"      case \n{{ source }}\n\r\n      \n{% for sym in namesyms %}\r\n      when {{ sym.id }} then Name.new({{ sym.id.to_s }})\r\n      {% end %}\n\r\n      \nend\r\n    \n"}}]},{"html_id":"pdf/PDF/NumberTree","path":"PDF/NumberTree.html","kind":"class","full_name":"PDF::NumberTree","name":"NumberTree","abstract":false,"superclass":{"html_id":"pdf/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"pdf/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"pdf/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src\\pdf\\document\\pagetree\\number_tree.cr","line_number":2,"url":null}],"repository_name":"pdf","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"pdf/PDF","kind":"module","full_name":"PDF","name":"PDF"}},{"html_id":"pdf/PDF/ObjType","path":"PDF/ObjType.html","kind":"alias","full_name":"PDF::ObjType","name":"ObjType","abstract":false,"locations":[{"filename":"src\\pdf\\obj\\obj.cr","line_number":20,"url":null}],"repository_name":"pdf","program":false,"enum":false,"alias":true,"aliased":"(Array(PDF::ObjType) | Bool | Float64 | Hash(String, PDF::ObjType) | Int64 | PDF::Name | PDF::PdfRef | PDF::Stream | String | Nil)","aliased_html":"Array(<a href=\"../PDF/ObjType.html\">PDF::ObjType</a>) | Bool | Float64 | Hash(String, <a href=\"../PDF/ObjType.html\">PDF::ObjType</a>) | Int64 | <a href=\"../PDF/Name.html\">PDF::Name</a> | <a href=\"../PDF/PdfRef.html\">PDF::PdfRef</a> | <a href=\"../PDF/Stream.html\">PDF::Stream</a> | String | Nil","const":false,"namespace":{"html_id":"pdf/PDF","kind":"module","full_name":"PDF","name":"PDF"},"doc":"PDF supports eight basic types of object,five atoms and three comprehensives: \r\n- Boolean values\r\n- Integer and real numbers\r\n- Strings\r\n- Names\r\n- Arrays\r\n- Dictionaries\r\n- Streams\r\n- The null object (represented as nil in crystal)\r","summary":"<p>PDF supports eight basic types of object,five atoms and three comprehensives: \r - Boolean values\r - Integer and real numbers\r - Strings\r - Names\r - Arrays\r - Dictionaries\r - Streams\r - The null object (represented as nil in crystal)</p>"},{"html_id":"pdf/PDF/PageTreeNode","path":"PDF/PageTreeNode.html","kind":"class","full_name":"PDF::PageTreeNode","name":"PageTreeNode","abstract":false,"superclass":{"html_id":"pdf/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"pdf/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"pdf/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src\\pdf\\document\\pagetree\\pagetree.cr","line_number":43,"url":null}],"repository_name":"pdf","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"TYPE","name":"TYPE","value":"Name.new(\"Pages\")","doc":"The type of PDF object that this dictionary describes; must be Pages for a page tree node. \r","summary":"<p>The type of PDF object that this dictionary describes; must be Pages for a page tree node.</p>"}],"namespace":{"html_id":"pdf/PDF","kind":"module","full_name":"PDF","name":"PDF"},"doc":"for example, this is a pagetree with its child pages\r\n```plaintext\r\n  2 0 obj\r\n<< /Type /Pages\r\n/Kids [ 4 0 R\r\n10 0 R\r\n24 0 R\r\n]\r\n/Count 3\r\n>>\r\nendobj\r\n4 0 obj\r\n<< /Type /Page\r\n… Additional entries describing the attributes of this page …\r\n>>\r\nendobj\r\nDocument Structure 3.6\r\n77\r\n10 0 obj\r\n<< /Type /Page\r\n… Additional entries describing the attributes of this page …\r\n>>\r\nendobj\r\n24 0 obj\r\n<< /Type /Page\r\n… Additional entries describing the attributes of this page …\r\n>>\r\nendobj\r\n```\r","summary":"<p>for example, this is a pagetree with its child pages\r <code>plaintext 2 0 obj &lt;&lt; /Type /Pages /Kids [ 4 0 R 10 0 R 24 0 R ] /Count 3 &gt;&gt; endobj 4 0 obj &lt;&lt; /Type /Page … Additional entries describing the attributes of this page … &gt;&gt; endobj <a href=\"../PDF/Document.html\">Document</a> Structure 3.6 77 10 0 obj &lt;&lt; /Type /Page … Additional entries describing the attributes of this page … &gt;&gt; endobj 24 0 obj &lt;&lt; /Type /Page … Additional entries describing the attributes of this page … &gt;&gt; endobj</code></p>","constructors":[{"html_id":"new(parent:PDF::PdfRef?,kids:Array(PDF::PageTreeNode))-class-method","name":"new","abstract":false,"args":[{"name":"parent","external_name":"parent","restriction":"::PDF::PdfRef | ::Nil"},{"name":"kids","external_name":"kids","restriction":"::Array(::PDF::PageTreeNode)"}],"args_string":"(parent : PDF::PdfRef?, kids : Array(PDF::PageTreeNode))","args_html":"(parent : <a href=\"../PDF/PdfRef.html\">PDF::PdfRef</a>?, kids : Array(<a href=\"../PDF/PageTreeNode.html\">PDF::PageTreeNode</a>))","location":{"filename":"src\\pdf\\document\\pagetree\\pagetree.cr","line_number":60,"url":null},"def":{"name":"new","args":[{"name":"parent","external_name":"parent","restriction":"::PDF::PdfRef | ::Nil"},{"name":"kids","external_name":"kids","restriction":"::Array(::PDF::PageTreeNode)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(parent, kids)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"count-instance-method","name":"count","doc":"The number of leaf nodes (page objects) that are descendants of this node within the page tree.\r","summary":"<p>The number of leaf nodes (page objects) that are descendants of this node within the page tree.</p>","abstract":false,"location":{"filename":"src\\pdf\\document\\pagetree\\pagetree.cr","line_number":57,"url":null},"def":{"name":"count","visibility":"Public","body":"@kids.size"}},{"html_id":"type-instance-method","name":"type","doc":"The type of PDF object that this dictionary describes; must be Pages for a page tree node. \r","summary":"<p>The type of PDF object that this dictionary describes; must be Pages for a page tree node.</p>","abstract":false,"location":{"filename":"src\\pdf\\document\\pagetree\\pagetree.cr","line_number":47,"url":null},"def":{"name":"type","visibility":"Public","body":"TYPE"}}]},{"html_id":"pdf/PDF/PdfObj","path":"PDF/PdfObj.html","kind":"class","full_name":"PDF::PdfObj","name":"PdfObj","abstract":true,"superclass":{"html_id":"pdf/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"pdf/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"pdf/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src\\pdf\\obj\\obj.cr","line_number":24,"url":null}],"repository_name":"pdf","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"pdf/PDF","kind":"module","full_name":"PDF","name":"PDF"},"class_methods":[{"html_id":"raw_output(obj:ObjType,io)-class-method","name":"raw_output","abstract":false,"args":[{"name":"obj","external_name":"obj","restriction":"ObjType"},{"name":"io","external_name":"io","restriction":""}],"args_string":"(obj : ObjType, io)","args_html":"(obj : <a href=\"../PDF/ObjType.html\">ObjType</a>, io)","location":{"filename":"src\\pdf\\obj\\obj.cr","line_number":32,"url":null},"def":{"name":"raw_output","args":[{"name":"obj","external_name":"obj","restriction":"ObjType"},{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"case obj\nwhen Int64, Float64, Bool\n  io << obj\nwhen String\n  io << '<'\n  obj.each_codepoint do |cp|\n    (cp & 255).to_s(io, base: 16, precision: 2)\n  end\n  io << '>'\nwhen Name, PdfRef\n  io << obj.to_s\nwhen Nil\n  io << \"null\"\nwhen Array(ObjType)\n  io << \"[\"\n  obj.map do |o|\n    String.build do |builder|\n      self.raw_output(v, builder)\n    end\n  end.join(io, ' ')\n  io << \"]\"\nwhen Hash(String, ObjType)\n  io << \"<<\"\n  obj.map do |k, v|\n    \"#{Name.format(k)} #{String.build do |builder|\n      self.raw_output(v, builder)\n    end}\"\n  end.join(io, ' ')\n  io << \">>\"\nwhen Stream\n  obj.raw_output(io)\nend"}}],"instance_methods":[{"html_id":"generation-instance-method","name":"generation","abstract":false,"location":{"filename":"src\\pdf\\obj\\obj.cr","line_number":28,"url":null},"def":{"name":"generation","visibility":"Public","body":"0"}},{"html_id":"id:Int64?-instance-method","name":"id","abstract":true,"location":{"filename":"src\\pdf\\obj\\obj.cr","line_number":26,"url":null},"def":{"name":"id","return_type":"Int64 | ::Nil","visibility":"Public","body":""}},{"html_id":"output(io)-instance-method","name":"output","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src\\pdf\\obj\\obj.cr","line_number":56,"url":null},"def":{"name":"output","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":""}}]},{"html_id":"pdf/PDF/PdfRef","path":"PDF/PdfRef.html","kind":"struct","full_name":"PDF::PdfRef","name":"PdfRef","abstract":false,"superclass":{"html_id":"pdf/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"pdf/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"pdf/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"pdf/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src\\pdf\\obj\\ref.cr","line_number":2,"url":null}],"repository_name":"pdf","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"pdf/PDF","kind":"module","full_name":"PDF","name":"PDF"},"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src\\pdf\\obj\\ref.cr","line_number":2,"url":null},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src\\pdf\\obj\\ref.cr","line_number":2,"url":null},"def":{"name":"initialize","visibility":"Public","body":""}},{"html_id":"initizlize(target:Int32,version:Int32=0)-instance-method","name":"initizlize","abstract":false,"args":[{"name":"target","external_name":"target","restriction":"::Int32"},{"name":"version","default_value":"0","external_name":"version","restriction":"::Int32"}],"args_string":"(target : Int32, version : Int32 = 0)","args_html":"(target : Int32, version : Int32 = <span class=\"n\">0</span>)","location":{"filename":"src\\pdf\\obj\\ref.cr","line_number":5,"url":null},"def":{"name":"initizlize","args":[{"name":"target","external_name":"target","restriction":"::Int32"},{"name":"version","default_value":"0","external_name":"version","restriction":"::Int32"}],"visibility":"Public","body":"@target = target\n@version = version\n"}},{"html_id":"to_s-instance-method","name":"to_s","doc":"Returns a string representation of this object.\n\nDescendants must usually **not** override this method. Instead,\nthey must override `to_s(io)`, which must append to the given\nIO object.","summary":"<p>Returns a string representation of this object.</p>","abstract":false,"location":{"filename":"src\\pdf\\obj\\ref.cr","line_number":7,"url":null},"def":{"name":"to_s","visibility":"Public","body":"\"#{@target} #{@version} R\""}}]},{"html_id":"pdf/PDF/Stream","path":"PDF/Stream.html","kind":"class","full_name":"PDF::Stream","name":"Stream","abstract":false,"superclass":{"html_id":"pdf/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"pdf/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"pdf/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src\\pdf\\obj\\stream.cr","line_number":34,"url":null}],"repository_name":"pdf","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"pdf/PDF","kind":"module","full_name":"PDF","name":"PDF"},"doc":"A stream object, like a string object, is a sequence of bytes. \r\nHowever, a PDF application can read a stream incrementally, while a string must be read in its entirety.\r\n\r\nFurthermore, a stream can be of unlimited length, whereas a string is subject to\r\nan implementation limit. For this reason, objects with potentially large amounts\r\nof data, such as images and page descriptions, are represented as streams. \r\n\r\n*Note*: As with strings, this section describes only the syntax for writing a stream as a\r\nsequence of bytes. What those bytes represent is determined by the context in which\r\nthe stream is referenced.\r\n\r\nexample:\r\n```plaintext\r\n << /Length 534\r\n/Filter [/ASCII85Decode /LZWDecode]\r\n>>\r\nstream\r\nJ..)6T`?p&<!J9%_[umg\"B7/Z7KNXbN'S+,*Q/&\"OLT'F\r\nLIDK#!n`$\"<Atdi`\\Vn%b%)&'cA*VnK\\CJY(sF>c!Jnl@\r\nRM]WM;jjH6Gnc75idkL5]+cPZKEBPWdR>FF(kj1_R%W_d\r\n&/jS!;iuad7h?[L−F$+]]0A3Ck*$I0KZ?;<)CJtqi65Xb\r\nVc3\\n5ua:Q/=0$W<#N3U;H,MQKqfg1?:lUpR;6oN[C2E4\r\nZNr8Udn.'p+?#X+1>0Kuk$bCDF/(3fL5]Oq)^kJZ!C2H1\r\n'TO]Rl?Q:&'<5&iP!$Rq;BXRecDN[IJB`,)o8XJOSJ9sD\r\nS]hQ;Rj@!ND)bD_q&C\\g:inYC%)&u#:u,M6Bm%IY!Kb1+\r\n\":aAa'S`ViJglLb8<W9k6Yl\\\\0McJQkDeLWdPN?9A'jX*\r\nal>iG1p&i;eVoK&juJHs9%;Xomop\"5KatWRT\"JQ#qYuL,\r\nJD?M$0QP)lKn06l1apKDC@\\qJ4B!!(5m+j.7F790m(Vj8\r\n8l8Q:_CZ(Gm1%X\\N1&u!FKHMB~>\r\nendstream\r\n```\r","summary":"<p>A stream object, like a string object, is a sequence of bytes.</p>","constructors":[{"html_id":"new(dict:Hash(String,PDF::PdfObj),bytes:Array(UInt8))-class-method","name":"new","doc":"dict中不必指明字节数,因为计算时可以推出来\r","summary":"<p>dict中不必指明字节数,因为计算时可以推出来</p>","abstract":false,"args":[{"name":"dict","external_name":"dict","restriction":"::Hash(::String, ::PDF::PdfObj)"},{"name":"bytes","external_name":"bytes","restriction":"::Array(::UInt8)"}],"args_string":"(dict : Hash(String, PDF::PdfObj), bytes : Array(UInt8))","args_html":"(dict : Hash(String, <a href=\"../PDF/PdfObj.html\">PDF::PdfObj</a>), bytes : Array(UInt8))","location":{"filename":"src\\pdf\\obj\\stream.cr","line_number":79,"url":null},"def":{"name":"new","args":[{"name":"dict","external_name":"dict","restriction":"::Hash(::String, ::PDF::PdfObj)"},{"name":"bytes","external_name":"bytes","restriction":"::Array(::UInt8)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(dict, bytes)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"decode_params:Array(PDF::PdfObj)|Hash(String,PDF::PdfObj)|Nil-instance-method","name":"decode_params","abstract":false,"location":{"filename":"src\\pdf\\obj\\stream.cr","line_number":61,"url":null},"def":{"name":"decode_params","visibility":"Public","body":"@decode_params"}},{"html_id":"decode_params=(decode_params:Array(PDF::PdfObj)|Hash(String,PDF::PdfObj)|Nil)-instance-method","name":"decode_params=","abstract":false,"args":[{"name":"decode_params","external_name":"decode_params","restriction":"::Array(::PDF::PdfObj) | ::Hash(::String, ::PDF::PdfObj) | ::Nil"}],"args_string":"(decode_params : Array(PDF::PdfObj) | Hash(String, PDF::PdfObj) | Nil)","args_html":"(decode_params : Array(<a href=\"../PDF/PdfObj.html\">PDF::PdfObj</a>) | Hash(String, <a href=\"../PDF/PdfObj.html\">PDF::PdfObj</a>) | Nil)","location":{"filename":"src\\pdf\\obj\\stream.cr","line_number":61,"url":null},"def":{"name":"decode_params=","args":[{"name":"decode_params","external_name":"decode_params","restriction":"::Array(::PDF::PdfObj) | ::Hash(::String, ::PDF::PdfObj) | ::Nil"}],"visibility":"Public","body":"@decode_params = decode_params"}},{"html_id":"filter:Array(PDF::Name)|PDF::Name|Nil-instance-method","name":"filter","abstract":false,"location":{"filename":"src\\pdf\\obj\\stream.cr","line_number":61,"url":null},"def":{"name":"filter","visibility":"Public","body":"@filter"}},{"html_id":"filter=(filter:Array(PDF::Name)|PDF::Name|Nil)-instance-method","name":"filter=","abstract":false,"args":[{"name":"filter","external_name":"filter","restriction":"::Array(::PDF::Name) | ::PDF::Name | ::Nil"}],"args_string":"(filter : Array(PDF::Name) | PDF::Name | Nil)","args_html":"(filter : Array(<a href=\"../PDF/Name.html\">PDF::Name</a>) | <a href=\"../PDF/Name.html\">PDF::Name</a> | Nil)","location":{"filename":"src\\pdf\\obj\\stream.cr","line_number":61,"url":null},"def":{"name":"filter=","args":[{"name":"filter","external_name":"filter","restriction":"::Array(::PDF::Name) | ::PDF::Name | ::Nil"}],"visibility":"Public","body":"@filter = filter"}},{"html_id":"length-instance-method","name":"length","doc":"The number of bytes from the beginning of the line following the keyword stream to the last byte just before the keyword\r\nendstream. (There may be an additional EOL marker, preceding endstream, that is not included in the count and is not logically part of\r\nthe stream data.) \r","summary":"<p>The number of bytes from the beginning of the line following the keyword stream to the last byte just before the keyword\r endstream.</p>","abstract":false,"location":{"filename":"src\\pdf\\obj\\stream.cr","line_number":40,"url":null},"def":{"name":"length","visibility":"Public","body":"@bytes.size"}},{"html_id":"raw_output(io:IO)-instance-method","name":"raw_output","doc":"print keyword and boty bytes\r\nTODO:add filter and cryptor\r","summary":"<p>print keyword and boty bytes\r TODO:add filter and cryptor</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src\\pdf\\obj\\stream.cr","line_number":84,"url":null},"def":{"name":"raw_output","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"io << \"stream\\n\"\nio << \"\\nendstream\\n\"\n"}}]}]}]}}